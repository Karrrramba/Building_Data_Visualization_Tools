---
title: "Mod_4_visualization"
format: gfm
editor: visual
---

```{r}
#| warning: false
#| output: false
library(tidyverse)
library(gridExtra)
library(ggthemes)
library(faraway)
library(dlnm)

data("chicagoNMMAPS")
data("worldcup")
```

## Basis plotting with ggplot2

`ggplot` is used to construct the initial ggplot object. It takes a dataset in the form of a data frame as input. There are three patterns used to invoke `ggplot()`

-   `ggolot(data = df, aes(x, y, ...))`

    Uses the same data and aesthetics. Recommended when all layers use the dame data and the same set of aesthetics. Although other data can be added to other layers.

-   `ggplot(data = df)`

    Specifies the base data but no aesthetics. Is best used when all layers are based on the same dataset but individual layers vary in the variables used for their respective aesthetics.

-   `ggplot()`

    Initializes a bare `ggplot` skeleton, with no variable and/or aesthetic mapping. Useful when multiple datasets are used to combine layers.

`ggplot` is very specific about specifying aesthetics inside `aes`.

```{r}
#| eval: false
# Good
ggplot(worldcup, aes(x = Shots, y = Passes))

# Bad
ggplot(worldcup, x = Shots, y = Passes)
```

The `data` aargument has to be specified before or with the aesthetics. If no dataset is specified within `ggplot()` but inside another `geom_*` make sure to use the `data` argument as `data` is not the first parameter expected in `geom` calls.

```{r}
#| eval: false
# Good
ggplot(worldcup, aes(x = Shots, y = Passes)) +
  geom_point()

ggplot(worldcup) +
  geom_point(aes(x = Shots, y = Passes))

ggplot() +
  geom_point(data = worldcup, aes(x = Shots, y = Passes))

# Bad
ggplot() +
  geom_point(worldcup, aes(x = Shots, y = Passes))
```

### Saving plots

To save a plot using code in a script, take the following steps: (1) open a graphics device (e.g., using the function `pdf` or `png`) (2) run the code and (3) close the graphics device using the `dev.off` function. Note that the function you use to open a graphics device will depend on the type of device you want to open, but you close all devices with the same function (`dev.off`).

### Geoms

All geom functions have required and accepted aesthetics, e.g. `geom_point` requires `x` and `y`, but the function also accepts `alpha`, `color`, `fill`, `group`, `size`, `shape` and `stroke`.

```{r}
# Basic scatterplot with required aesthetics only
ggplot(worldcup, aes(Time, Passes)) +
  geom_point()

# Avanced visualization of the same data with additional aesthetics arguments
ggplot(worldcup, aes(Time, Passes,
                     color = Position,
                     size = Shots)) +
  geom_point()

```

Combining several geoms in one plot allows us to create interesting graphs, e.g. by adding highlights.

```{r}
noteworthy_players <- worldcup %>% filter(Shots == max(Shots) | 
                                            Passes == max(Passes)) %>%
  mutate(point_label = paste(Team, Position, sep = ", "))

ggplot(worldcup, aes(x = Passes, y = Shots)) + 
  geom_point() + 
  # notice how the additional layer is added from a different df
  geom_text(data = noteworthy_players, aes(label = point_label), 
            # Label orientation
            vjust = "inward", hjust = "inward") 
```

### Using constant aesthetics

Instead of mapping an aesthetic to an element of the dataset, we can apply a constant value. To do this, we specify the color aesthetic outside of an `aes` call:

```{r}
ggplot(worldcup, aes(x = Time, y = Passes)) + 
  geom_point(color = "darkgreen")
```

This can be applied to all geoms, including `fill`, `shape`, and `size`. While `color` are specified by strings, `shape` is specified by a numbere between 1 and 21.

## Guidelines for good plots

The guidelines are:

-   Aim for high data density

-   Use clear, meaningful labels

-   Provide useful references

-   Highlight interesting aspects of the data

-   Consider using small multiples

-   Make order meaningful

### Aim for high data density

The ratio of "ink" to data should be kept as low as possible. Below are two graphs displaying the same amount of information. Notice how the right plot shows the same amount of information with minimal space. Further, the right plot has the background color and grid lines removed.

```{r}
h <- worldcup %>% 
  count(Position) %>% 
  ggplot(aes(n, factor(Position))) +
  geom_col() +
  ggtitle("1. Lower data quality") +
  xlab("Number of players") +
  ylab("")

e <- worldcup %>% 
  count(Position) %>% 
  ggplot(aes(n, factor(Position))) +
  geom_point() +
  theme_classic() + 
  ggtitle("2. Higher data quality") +
  xlab("Number of players") +
  ylab("")

grid.arrange(h, e, ncol = 2)
```

By increasing the data-to-ink ratio in a plot we ca help the viewers see the data more quickly. A cluttered plot is harder to interpret. Further, we leave some room to add additional data, references and highlights. A major method for decreasing clutter in the plot is choosing the right `theme`. A number of theme functions comes with `ggplot2`: - `theme_linedraw` - `theme_bw` - `theme_minimal` - `theme_void` - `theme_dark` - `theme_classic`

```{r}
#| echo: false

tl <- worldcup %>% 
  count(Position) %>% 
  ggplot(aes(n, factor(Position))) +
  geom_point() +
  theme_linedraw() + 
  ggtitle("theme_linedraw") +
  xlab("Number of players") +
  ylab("")
tb <- worldcup %>% 
  count(Position) %>% 
  ggplot(aes(n, factor(Position))) +
  geom_point() +
  theme_bw() + 
  ggtitle("theme_bw") +
  xlab("Number of players") +
  ylab("")
tm <- worldcup %>% 
  count(Position) %>% 
  ggplot(aes(n, factor(Position))) +
  geom_point() +
  theme_minimal() + 
  ggtitle("theme_minimal") +
  xlab("Number of players") +
  ylab("")
tv <- worldcup %>% 
  count(Position) %>% 
  ggplot(aes(n, factor(Position))) +
  geom_point() +
  theme_void() + 
  ggtitle("theme_void") +
  xlab("Number of players") +
  ylab("")
td <- worldcup %>% 
  count(Position) %>% 
  ggplot(aes(n, factor(Position))) +
  geom_point() +
  theme_dark() + 
  ggtitle("theme_dark") +
  xlab("Number of players") +
  ylab("")
tc <- worldcup %>% 
  count(Position) %>% 
  ggplot(aes(n, factor(Position))) +
  geom_point() +
  theme_classic() + 
  ggtitle("theme_classic") +
  xlab("Number of players") +
  ylab("")

grid.arrange(tl, tb, tm, tv, td, td, ncol = 2)
```

Additional themes are available with the `ggthemes` package.

### Use clear, meaningful labels

The default for `ggplot2` is to use column names as axis labels. While this is convenient for exploratory plots, it is not adequate for presentations and publications. For EDA we can stick to short names like "wt", but should use longer, precise labeling for another audience ("Weight \[kg\]"). If variables require longer labels, consider flipping the axes with `coord_flip`.

```{r}
#| echo: FALSE
b <- worldcup %>% 
  rename(Pos = Position) %>% 
  mutate(Pos = forcats::fct_recode(Pos,
                          "DC" = "Defender",
                          "FW" = "Forward",
                          "GK" = "Goalkeeper",
                          "MF" = "Midfielder")) %>% 
  count(Pos) %>% 
  ggplot(aes(Pos, n)) +
  geom_col() +
  ggtitle("Bad")
  
g <- worldcup %>% 
  count(Position) %>% 
  ggplot(aes(Position, n)) +
  geom_col(fill = "lightgrey") +
  ggtitle("Good")+
  ylab("Number of players") +
  coord_flip() +
  ggthemes::theme_tufte()

grid.arrange(b,g, ncol = 2)
```

Include units of measurement - where relevant - in axis titles or tick marks. The `scale_*` (e.g. `scale_x_continuous`) from the `scales` package offer lots of customization via the `name`, `labels` or `scale` arguments.

```{r}
worldcup %>% 
  count(Position) %>% 
  mutate(total = sum(n),
         prop = round(n * 100 / total, 2)) %>% 
  ggplot(aes(Position, prop)) +
  geom_col(fill = "lightgrey") +
  scale_y_continuous("Proportion of players", 
                     labels = scales::label_percent(scale  = 1)) +
  coord_flip() +
  ggthemes::theme_tufte()
```

### Provide useful references

Adding reference values is a great way to present outliers in the data. One way of adding reference is by showing trends and relationships between variables, e.g. by adding a linear or smooth function.

```{r}
n <- ggplot(worldcup, aes(Passes, Shots)) +
  geom_point()+
  ggtitle("No reference") +
  theme_tufte()

r <- ggplot(worldcup, aes(Passes, Shots)) +
  geom_point()+
  geom_smooth(formula = y ~ x, method = "lm") +
  ggtitle("With reference") +
  theme_tufte()

grid.arrange(n, r, ncol = 2)
```

Some considerations for adding references: - Add reference layers first - Add transparency `alpha` - Use neutral colors (greys) - Use non-solid lines (`linetype = 3`)

Other helpful functions for adding references - or highlights - are:

-   `geom_hline` and `geom_vline` for horizontal and vertical lines, respectively

-   `geom_abline` adds a line with an intercept and a slope

-   `geom_rect` adds a filled rectangle

-   `geom_poly` adds a filled polygon

-   `geom_path` adds an empty polygon

```{r}
h <- ggplot(worldcup, aes(Time, Shots)) +
  geom_hline(yintercept = c(10, 20), linetype = 3) + 
  geom_point(shape = 1) +
  theme_few() +
  ggtitle("hline")

v <- ggplot(worldcup, aes(Time, Shots)) +
  geom_vline(xintercept = 400, linetype = 3) + 
  geom_point(shape = 1) +
  theme_few() +
  ggtitle("vline")

a <- ggplot(worldcup, aes(Time, Shots)) +
  geom_abline(intercept = 0, slope = 0.01, color = "darkred") + 
  geom_point(shape = 1) +
  theme_few() +
  ggtitle("abline")

grid.arrange(h, v, a, ncol = 3)
```

```{r}
r <- ggplot(worldcup, aes(Time, Shots)) +
  geom_rect(xmin = 0, xmax = 595, ymin = 0, ymax = 5, fill = "lightgrey", alpha = 0.8) + 
  geom_point(shape = 1) +
  theme_few() +
  ggtitle("rect")

pl <- ggplot(worldcup, aes(Time, Shots)) +
  geom_polygon(data = data.frame(x = c(0, 30, 280, 280),
                                 y = c(0, 5, 5, 0)),
               aes(x = x, y = y),
               alpha = 0.8,
               fill = "darkgrey") + 
  geom_point(shape = 1) +
  theme_few() +
  ggtitle("polygon")

pa <- ggplot(worldcup, aes(Time, Shots)) +
  geom_path(data = data.frame(x = c(420, 420, 595, 595),
                                 y = c(16, 28, 28, 16)),
            aes(x = x, y = y),
            alpha = 0.5,
            color = "darkred",
            linetype = 1,
            size = 0.7) + 
  geom_point(shape = 1) +
  theme_few() +
  ggtitle("path")

grid.arrange(r, pl, pa, ncol = 2)
```

Adding test is another great way of highlighting features of the data. Hightlighting layers like `geom_text` often require a designated dataset.

```{r}
top_players <- worldcup %>% 
  filter(Passes == max(Passes) | Shots == max(Shots)) %>% 
  mutate(Name = rownames(.),
         Label = paste0(Name, Team, sep = ', '))

ggplot(worldcup, aes(Passes, Shots)) +
  geom_point() +
  geom_text(data = top_players, aes(label = Label),
            vjust = "inward", hjust = "inward",
            color = "darkgreen") +
  theme_few()
```

### Use small multiplets

Multiplets are small plots with the same x- and y-axes showing different subsets of the data. They are a great way to de-clutter busy plots.

```{r}
#| echo: false
ggplot(worldcup, aes(Time, Shots, color = Position)) + 
  geom_point() +
  theme_bw()
```

```{r}
ggplot(worldcup, aes(Time, Shots)) + 
  geom_point() +
  theme_bw() +
  facet_grid(. ~ Position)
```

\`facet_grid\` can facet by either rows or columns, or both.

```{r}
#| eval: false
facet_grid([factor for rows] ~ [facet for cloumns])
```

```{r}
worldcup %>%
  filter(Team %in% c("Spain", "Netherlands")) %>%
  ggplot(aes(x = Time, y = Shots)) + 
  geom_point() +
  facet_grid(Team ~ Position) 
```

While `facet_grid` is best used for two discrete variables and all combinations of the variables are available, `facet_wrap` is best used for one variable with many levels.

```{r}
worldcup %>%
  ggplot(aes(x = Time, y = Shots)) + 
  geom_point(alpha = 0.25) +
  facet_wrap(~ Team, ncol = 6) 
```

### Make order meaningful

Using meaningful arrangement of data makes interpretation of plots easier. Here, use the `factor()` function to re-order factor variables and change the ordering via the `levels` variable.

```{r}
a <- worldcup %>% 
  group_by(Team) %>% 
  summarise(Time = mean(Time)) %>% 
  ggplot(aes(Time, Team)) +
  geom_point() +
  theme_few() +
  xlab("Mean play time per player") +
  ggtitle("Alphabetical")

b <- worldcup %>% 
  group_by(Team) %>% 
  summarise(Time = mean(Time)) %>% 
  arrange(Time) %>% 
  mutate(Team = factor(Team, levels = Team)) %>% 
  ggplot(aes(Time, Team)) +
  geom_point() +
  theme_few() +
  xlab("Mean play time per player")+
  ggtitle("Meaningful")

grid.arrange(a, b, ncol = 2)
```

We can also use a variable of interest to order multiplets. Here, we use the average number of shots taken to order player positions.

```{r}
worldcup %>%
  select(Position, Time, Shots) %>%
  group_by(Position) %>%
  mutate(avg_shots = mean(Shots),
         most_shots = Shots == max(Shots)) %>%
  ungroup() %>%
  arrange(avg_shots) %>%
  mutate(Position = factor(Position, levels = unique(Position))) %>%
  ggplot(aes(x = Time, y = Shots, color = most_shots)) + 
  geom_point(alpha = 0.5) + 
  scale_color_manual(values = c("TRUE" = "green", "FALSE" = "black"),
                     guide = FALSE) + 
  facet_grid(. ~ Position) + 
  theme_few()
```

```{r}
worldcup %>%
  select(Team, Time) %>%
  group_by(Team) %>%
  mutate(t_avg = mean(Time),
                t_min = min(Time),
                t_max = max(Time)) %>%
  arrange(t_avg) %>%
  ungroup() %>%
  mutate(Team = factor(Team, levels = unique(Team))) %>%
  ggplot(aes(Time, Team)) + 
  geom_segment(aes(x = t_min, xend = t_max, yend = Team),
               alpha = 0.5, color = "gray") + 
  geom_point(alpha = 0.5) + 
  geom_point(aes(x = t_avg), size = 2, color = "red", alpha = 0.5) + 
  theme_minimal() + 
  ylab("")
```

## Colors and scales
