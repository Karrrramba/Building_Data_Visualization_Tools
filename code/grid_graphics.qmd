---
title: "Untitled"
format: gfm
editor: visual
graphics: yes
execute: 
  warning: false
  error: false
---

## Grid graphics

The `grid` package is a base package, i.e. does not need to be installed, but it need to be loaded with a `library()` call. It is the underlying architecture for the graphilac outputs of `ggplot2`. Grid is a low-level of graphics, i.e. meant to modify specific aspects of graphics rather than functions, which produce plots. Grid graphics are separate from base R graphics. Almost any plot (or geom) can be created with grid graphics. However, `ggplot2` is more time efficient.

### Graphical objects (grobs)

Grobs are graphical objects created with grid graphics functions. They can be added to or taken away from larger grid graphics objects, like `ggplot2` plots. The `grid` package offers a family of `*grob` functions that can create many elements like: `circleGrob` `legendGrob` `linesGrob` `polygonGrob` `rasterGrob` `rectGrob` `segmentGrob` `xaxisGrob` `yaxisGrob`

The `sp` parameter inside these functions specifies the graphical aesthetics parameters like color, fill, line type, line width, etc. These are specified in a `gpar` object. The parameters which can be specified inside the `gpar` object are: `alpha`: transparency `col`: color `fill`: fill `fontface`, `fontstyle`, `fontsize`: font elements `lineend`: line end style `linejoin`: line join style `lty`: line type `lwd`: line width, `textGrob`: text

Additional grobs can be added by other packages, e.g. `tableGrob` from `gridExtra`.

```{r}
#| output: false
library(dplyr)
library(faraway)
library(ggplot2)
library(grid)
library(gridExtra)
library(magrittr)

data("worldcup")
```

```{r}
#| fig-show: asis
basic_circle <-  circleGrob(name = "basic_circle", 
                            x = 0.5, y = 0.5, r = 0.5, 
                            gp = gpar(col =  "darkred", lty = 3))
grid.draw(basic_circle)
```
By default, the grob will fill out the graphics device and is centered in the middle of the plot.

Grobs can be edited via the `grid.edit()` function.

```{r circle_square}
my_circle <- circleGrob(name = "my_circle",
                        x = 0.5, y = 0.5, r = 0.5,
                        gp = gpar(col = "gray", lty = 3))
grid.draw(my_circle)
grid.edit("my_circle", gp = gpar(col = "red", lty = 1))
my_rect <- rectGrob(x = 0.5, y = 0.5, width = 0.8, height = 0.3)
grid.draw(my_rect)
```
Since `ggplot` objects integrate well into `grid` graphics tools, they can be combined.
```{r scatter_circle}
wrldcp_scatter <- ggplot(worldcup, aes(Time, Passes)) +
  geom_point()

grid.draw(wrldcp_scatter)
grid.draw(my_circle)
```

This integration also allows us to alter any `ggplot` object. To do this, we first need to produce the ggplot output, list all the elements of the object with the calls to `ggrid.force()` and `grid.ls()`, and lastly change the element via the `grid.edit()` function.
Some grobs are only displayed when called. The `grid.force()` function displays their content even when not drawn, e.g. when we call `grid.ls()`. With `grid.force()` we can use `grid.ls()` with `ggplot` objects.
```{r scatter}
wrldcp_scatter
grid.force()
grid.ls()

```

```{r red_scatter}
grid.edit("geom_point.points.791", gp = gpar(col = "darkred"))
```

The `ggplotGrob()` function transforms a ggplot object into a grob.

A `gTree` is composed of several grob elements ("children") , e.g. a boxplot, which is composed of rectangles, lines and points.
```{r boxplot}
box <- rectGrob(x = 0.5, y = 0.5, width = 0.25, height = 0.25)
iqr1 <- segmentsGrob(x0 = 0.5, x1 = 0.5, y0 = 0.625, y1 = 0.75)
iqr1_line <- segmentsGrob(x0 = 0.4, x1 = 0.6, y0 = 0.75, y1 = 0.75)
median_line<- segmentsGrob(x0 = 0.375, x1 = 0.625, y0 = 0.5, y1 = 0.5)
iqr3 <- segmentsGrob(x0 = 0.5, x1 = 0.5, y0 = 0.25, y1 = 0.375)
iqr3_line <- segmentsGrob(x0 = 0.4, x1 = 0.6, y0 = 0.25, y1 = 0.25)
boxplot <- gTree(children = gList(box, median_line, iqr1, iqr1_line, iqr3, iqr3_line))

grid.draw(boxplot)
```
A call to `grid.ls()` lists all the children of a `gTree`.
```{r}
grid.ls(boxplot)
```
### Viewports
Viewports are working spaces within a plot. They can be navigated into and out to create grobs, e.g. charts withing polygons on a map.


### Grob arranegment with `gridExtra`

Packages like `gridExtra` provide additional grobs like `tableGrob`.
The following code creates a viewport via `viewport()`, then navigates into it with the `pushViewport()` function to create a rounded rectangle and embed the boxplot created previously. The `popViewport()` function is used to navigate out of the viewport.
```{r viewport_box}
grid.draw(rectGrob())
sample_vp <- viewport(x = 0.5, y = 0.5, 
                      width = 0.5, height = 0.5,
                      just = c("left", "bottom"))
pushViewport(sample_vp)
grid.draw(roundrectGrob())
grid.draw(boxplot)
popViewport()
```

The parameters inside the `viewport()` function specify its location. While `x` and `y` specify a location on the respective plot axis (ranging between 0 and 1), the `just` argument defines where this location is in relation to the viewport. Notice that `just` also takes one argument for each axis!
In order to locate the boxplot in the center of the plot:
```{r vp_box_center}
grid.draw(rectGrob())
sample_vp <- viewport(x = 0.5, y = 0.5, 
                      width = 0.5, height = 0.5,
                      just = c("center", "center"))
pushViewport(sample_vp)
grid.draw(roundrectGrob())
grid.draw(boxplot)
popViewport()
```

In a case when we want to create multiple viewports, we can start creating grobs inside a second viewport after navigating out of the first one.
```{r vp_box_double}
grid.draw(rectGrob())
sample_vp <- viewport(x = 0.75, y = 0.75, 
                      width = 0.25, height = 0.25,
                      just = c("left", "bottom"))
pushViewport(sample_vp)
grid.draw(roundrectGrob())
grid.draw(boxplot)
popViewport()

sample_vp2 <- viewport(x = 0.5, y = 0.5, 
                      width = 0.5, height = 0.5,
                      just = c("right", "top"))
pushViewport(sample_vp2)
grid.draw(roundrectGrob())
grid.draw(boxplot)
popViewport()
```

Viewports can also be placed inside each other:
```{r vp_nested}
grid.draw(rectGrob())

sample_vp <- viewport(x = 0.5, y = 0.5, 
                      width = 0.5, height = 0.5,
                      just = c("left", "bottom"))
# coordinates on the scale of the bigger viewport
sample_vp2 <- viewport(x = 0.1, y = 0.1, 
                      width = 0.4, height = 0.4,
                      just = c("left", "bottom"))

pushViewport(sample_vp)
grid.draw(roundrectGrob(gp = gpar(col = "darkred")))
pushViewport(sample_vp2)
grid.draw(roundrectGrob())
grid.draw(boxplot)
popViewport(2)
```


### Grid coordinate systems
There are several units which can be used for coordinates systems:
native: used for placing objects based on the x- or y-axis. Most useful when working with `ggplot2`
npc: Range between 0 and 1 on the plot canvas. Use when designing new plots (see viewports above).
absolute: `inches`, `cm`, `mm` ; use for plots with designated formats

A coordinate system can be specified when placing an object via the `unit()` function:
```{r coorsys_plot}
ex_vp <- viewport(x = 0.5, y = 0.5, 
                  just = c("center", "center"),
                  height = 0.8, width = 0.8,
                  xscale = c(0, 100), yscale = c(0, 10))
pushViewport(ex_vp)
grid.draw(rectGrob())
grid.draw(circleGrob(x = unit(20, "native"), y = unit(5, "native"),
                     r = 0.1, gp = gpar(fill = "lightgrey")))
grid.draw(circleGrob(x = unit(85, "native"), y = unit(8, "native"),
                     r = 0.1, gp = gpar(fill = "darkred")))
popViewport()
```

### The `gridExtra` package
The gridExtra package allows the arrangement of multiple objects inside a plotting device via its `grid.arrange` function. It works with grid graphics - already created as well as with `grid` functions like `circleGrob` - and `ggplot` objects. 
```{r gridarrange_1}
time_vs_shots <- ggplot(worldcup, aes(x = Time, y = Shots)) + 
  geom_point()
player_positions <- ggplot(worldcup, aes(x = Position)) + 
  geom_bar()

grid.arrange(boxplot, player_positions, time_vs_shots, circleGrob(), ncol = 2)
```
The size of each plot can be adjusted with the `layout_matrix` parameter, for which a `matrix` is filled with numbers indicating the tiles populated by each grob. Blank spaces are indicated by `NA`. The `byrow` parameter indicates whether the matrix is populated be columns (default) or rows. Set `byrow = TRUE` to created several rows.
```{r}
grid.arrange(time_vs_shots, player_positions,
             layout_matrix = matrix(c(1, 1, NA, NA, 2, 2), ncol = 3, byrow = TRUE))
```
Additionally, if we want to implement tables, we can transform any data frame into a `tableGrob`,
```{r scatter_table}
wrldcp_tbl <- worldcup %>%
  filter(Team %in% c("Germany", "Spain", "Netherlands", "Uruguay")) %>%
  group_by(Team) %>%
  dplyr::summarize(`Average time` = round(mean(Time), 1),
                   `Average shots` = round(mean(Shots), 1), 
                   .groups = "drop") %>%
  tableGrob()

grid.draw(ggplotGrob(time_vs_shots)) #transform scatterplot into grob
wrldcp_tbl_vp <- viewport(x = 0.22, y = 0.85, 
                        just = c("left", "top"),
                        height = 0.1, width = 0.2)
pushViewport(wrldcp_tbl_vp)
grid.draw(wrldcp_tbl)
popViewport()
```


